stages:
    - build
    - linter
    - test
    - visualize
    - deploy
    - sonar

image: java:8-jdk
before_script:
    - chmod +x ./gradlew
    - export GRADLE_USER_HOME=`pwd`/.gradle
variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
        - $GRADLE_USER_HOME/wrapper
        - $GRADLE_USER_HOME/caches

build:
    stage: build
    script:
        - ./gradlew --build-cache clean assemble
    artifacts:
        when: on_success
        paths:
            - build/libs/*.jar
        expire_in: 1 week
    cache:
        key: $CI_COMMIT_REF_NAME
        policy: push
        paths:
            - build
            - .gradle

linter:
    stage: linter
    script:
        - ./gradlew checkstyleMain checkstyleTest
    needs: ["build"]
    cache:
        key: $CI_COMMIT_REF_NAME
        policy: pull-push
        paths:
            - build
            - .gradle
    artifacts:
        when: always
        paths:
            - build/reports/checkstyle/*.html
    when: on_success

test:
     stage: test
     script:
         - ./gradlew check
         - ./gradlew jacocoTestReport
         - ./gradlew jacocoTestCoverageVerification
         - ./gradlew jacocoMergeTest
         - grep Total build/reports/jacoco/test/html/index.html
     needs: ["build"]
     cache:
         key: $CI_COMMIT_REF_NAME
         policy: pull-push
         paths:
             - build
             - .gradle
     artifacts:
         when: always
         paths:
             - build/reports/jacoco/test/jacocoTestReport.xml
         reports:
             junit: build/test-results/test/*.xml
     when: on_success

coverage:
    # Must be in a stage later than test-jdk11's stage.
    # The `visualize` stage does not exist by default.
    # Please define it first, or chose an existing stage like `deploy`.
    stage: visualize
    image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
    script:
        # convert report from jacoco to cobertura, using relative project path
        - python /opt/cover2cover.py build/reports/jacoco/test/jacocoTestReport.xml $CI_PROJECT_DIR/src/main/java/ > build/cobertura.xml
    needs: ["test"]
    dependencies:
        - test
    artifacts:
        reports:
            cobertura: build/cobertura.xml

staging:
    stage: deploy
    image: ubuntu:latest
    variables:
        SSH_STAGING_PRIVATE_KEY: $SSH_STAGING_PRIVATE_KEY
    before_script:
        # Setup SSH deploy keys
        - apt-get update -y
        - 'which ssh-agent || ( apt-get install -y openssh-client )'
        - 'which rsync || ( apt-get install -y rsync )'
        - eval $(ssh-agent -s)
        - echo "$SSH_STAGING_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    cache:
        key: $CI_COMMIT_REF_NAME
        policy: pull
        paths:
            - build
            - .gradle
    script:
        - rsync -hvrPt ./build/libs/*.jar deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/backend/app.jar
        - ssh deploy-ci@staging.markazpillar.afriza.co "sudo systemctl restart backend && sudo systemctl restart nginx"
    needs: ["linter", "test"]
    only:
        - master

production:
    stage: deploy
    image: ubuntu:latest
    variables:
        SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY
    before_script:
        # Setup SSH deploy keys
        - apt-get update -y
        - 'which ssh-agent || ( apt-get install -y openssh-client )'
        - 'which rsync || ( apt-get install -y rsync )'
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    cache:
        key: $CI_COMMIT_REF_NAME
        policy: pull
        paths:
            - build
            - .gradle
    script:
        - rsync -hvrPt ./build/libs/*.jar deploy-ci@markazpillar.afriza.co:/home/deploy-ci/apps/backend/app.jar
        - ssh deploy-ci@markazpillar.afriza.co "sudo systemctl restart backend && sudo systemctl restart nginx"
    needs: ["test"]
    only:
        - production

sonarCheck:
    stage: sonar
    variables:
        SONARQUBE_URL: $SONARQUBE_URL
        SONARQUBE_PROJECT_KEY: $SONARQUBE_PROJECT_KEY
        SONAR_TOKEN: $SONAR_TOKEN
    script:
     - ./gradlew sonarqube -Dsonar.login=$SONARQUBE_TOKEN -Dsonar.host.url=$SONARQUBE_URL -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY
    needs: ["test"]
