stages:
    - build
    - test
    - deploy
    - sonar

image: java:8-jdk
before_script:
    - chmod +x ./gradlew
    - export GRADLE_USER_HOME=`pwd`/.gradle
variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
        - $GRADLE_USER_HOME/wrapper
        - $GRADLE_USER_HOME/caches

build:
    stage: build
    script:
        - ./gradlew --build-cache clean assemble
    artifacts:
        when: on_success
        paths:
            - build/libs/*.jar
        expire_in: 1 week
    cache:
        key: $CI_COMMIT_REF_NAME
        policy: push
        paths:
            - build
            - .gradle

test:
     stage: test
     needs:
         - job: build
     script:
         - ./gradlew check
         - ./gradlew jacocoTestReport
         - ./gradlew jacocoTestCoverageVerification
         - ./gradlew jacocoMergeTest
         - grep Total build/reports/jacoco/test/html/index.html
     cache:
         key: $CI_COMMIT_REF_NAME
         policy: pull-push
         paths:
             - build
             - .gradle
     artifacts:
         when: always
         reports:
             junit: build/test-results/test/TEST-*.xml
     when: on_success

staging:
    stage: deploy
    needs:
        - job: test
    before_script:
        - apt-get update -qq
        # Setup SSH deploy keys
        - 'which ssh-agent || ( apt-get install -qq openssh-client )'
        - 'which rsync || ( apt-get install -qq rsync )'
        - eval $(ssh-agent -s)
        - ssh-add <(echo "$SSH_STAGING_PRIVATE_KEY")
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    cache:
        key: $CI_COMMIT_REF_NAME
        policy: pull
        paths:
            - build
            - .gradle
    script:
        - rsync -hvrPt ./build/libs/*.jar deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/backend/app.jar
        - ssh deploy-ci@staging.markazpillar.afriza.co "sudo systemctl restart backend && sudo systemctl restart nginx"
    only:
        - staging

production:
    stage: deploy
    needs:
        - job: test
    before_script:
        - apt-get update -qq
        # Setup SSH deploy keys
        - 'which ssh-agent || ( apt-get install -qq openssh-client )'
        - 'which rsync || ( apt-get install -qq rsync )'
        - eval $(ssh-agent -s)
        - ssh-add <(echo "$SSH_PRIVATE_KEY")
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    cache:
        key: $CI_COMMIT_REF_NAME
        policy: pull
        paths:
            - build
            - .gradle
    script:
        - rsync -hvrPt ./build/libs/*.jar deploy-ci@markazpillar.afriza.co:/home/deploy-ci/apps/backend/app.jar
        - ssh deploy-ci@markazpillar.afriza.co "sudo systemctl restart backend && sudo systemctl restart nginx"
    only:
        - master

sonarCheck:
    stage: sonar
    needs:
     - job: test
    variables:
        SONARQUBE_URL: $SONARQUBE_URL
        SONARQUBE_PROJECT_KEY: $SONARQUBE_PROJECT_KEY
        SONAR_TOKEN: $SONAR_TOKEN
    script:
     - ./gradlew sonarqube -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=$SONARQUBE_URL -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY
